swagger: '2.0'
basePath: /api
info:
  title: Estimation Game API
  version: "0.1"
  description: Simpe Restful API for the estimation game app
consumes:
  - application/json
produces:
  - application/json

paths:
  /ping:
    get:
      operationId: view.ping_pong
      summary: Do a ping, get a pong
      responses:
        200:
          description: Pong
          schema:
            type: string
            example: "Pong"
  /hello:
    get:
      operationId: view.hello
      summary: Like a ping but with attached session
      responses:
        200:
          description: Pong
          schema:
            type: string
            example: "Total visits: 42"
  /story:
    get:
      tags: [ Story ]
      operationId: view.get_story
      summary: Get the story
      responses:
        200:
          description: Return the story that is to be estimated
          schema:
            type: object
            $ref: '#/definitions/Story'
    put:
      tags: [ Story ]
      operationId: view.put_story
      summary: Modify the story
      consumes:
        - application/json
      parameters:
        - in: body
          name: story
          description: The story to update.
          schema:
            type: object
            properties:
              title:
                type: string
                example: "[BACKEND-42] Develop new feature"
              description:
                type: string
                example: "Because the customer is in desperate need"
      responses:
        200:
          description: Return the modified story
          schema:
            type: object
            $ref: '#/definitions/Story'

  /users:
    get:
      tags: [ User ]
      operationId: view.get_users
      summary: Get all users
      responses:
        200:
          description: Return the users
          schema:
            type: array
            items:
              type: object
              additionalProperties: true
          examples:
            application/json:
              body: { "users": [ { "hasVoted": null, "username": "Harald", "vote": "hidden" } ]}

  /users/{username}:
    delete:
      tags: [ User ]
      operationId: view.delete_user
      summary: Delete a user - serves as logout
      parameters:
        - in: path
          name: username
          type: string
          x-example: "Harald"
          required: true
          description: The username.
      responses:
        200:
          description: A success message
          schema:
            type: object
  /votes:
    delete:
      tags: [ Vote ]
      operationId: view.delete_votes
      summary: Delete all votes
      responses:
        200:
          description: A success message
          schema:
            type: object
  /votes/{username}:
    put:
      tags: [ Vote ]
      operationId: view.put_vote
      summary: Add a vote
      consumes:
        - application/json
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: The username.
          x-example: "Harald"
        - in: body
          name: vote
          description: The vote of the user to put.
          schema:
            type: object
            properties:
              vote:
                type: string
                example: "20"
      responses:
        200:
          description: A success message
          schema:
            type: object
  /vote_options:
    get:
      tags: [ User ]
      operationId: view.get_vote_options
      summary: Get allowed estimates
      responses:
        200:
          description: Return the possible vote options
          schema:
            type: array
            items:
              type: string
  /login:
    post:
      tags: [ Login ]
      operationId: view.post_login
      summary: User login
      consumes:
        - application/json
      parameters:
        - in: body
          name: login
          description: The request to login.
          schema:
            type: object
            properties:
              username:
                type: string
                example: "Harald"

      responses:
        200:
          description: Return a json containing the username
          schema:
            type: object
            properties:
              username:
                type: string
                example: "Harald"


definitions:
  Story:
    type: object
    required:
      - title
      - description
    properties:
      title:
        type: string
        description: Short title, probably containing ticket number
        example: "[BACKEND-42] Develop new feature"
        minLength: 1
        maxLength: 100
      description:
        type: string
        description: The long story description
        example: "Because the customer is in desperate need"
        minLength: 1




